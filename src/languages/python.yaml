- name: "*"
  style: "#00ffff"
  scope: source.python

# Syntactic sugar --------------------------------------------------------------

- name: decorator
  <<: *decorators
  scope:
  - punctuation.definition.decorator.python
  - source.python meta.function.decorator.python
  - source.python meta.function.decorator.python entity.name.function


# Comments ---------------------------------------------------------------------

- name: docstring
  <<: *comment_text
  scope: string.quoted.docstring.multi.python

# Language Specific ---------------------------------------------------------
- name: "python/function/dunders"
  <<: *name
  settings:
    fontStyle: italic
  scope:
  - support.function.magic
  - support.variable.magic.python

# Types ------------------------------------------------------------------------

# ~~~ Nulls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- name: var/type/nil
  style: n@syntax.red_lite
  scope: constant.language.null.python

# ~~~ Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- name: srting
  <<: *string
  scope:
  - meta.fstring.python string.interpolated.python

# Definitions ------------------------------------------------------------------
- name: definitions
  <<: *definition
  scope: storage.type.class.python

# # TODO(chaining): add support for chaining variables.

# Composite Types -----------------------------------------------------------

- name: Unpacking
  <<: *params
  scope:
  - keyword.operator.unpacking.parameter.python
  - keyword.operator.unpacking.arguments.python


# Operators -----------------------------------------------------------------

- name: keyword.operator.comparison
  style: syntax.red_lite
  scope:
  - keyword.operator.comparison.python

# Argumens in the call.
#  self.update_state(state="PROGRESS", meta={"current": i + 1, "total": total})
#                                    ^
- name: meta.function-call.arguments
  style: n@syntax.white_white/a70
  scope:
  - punctuation.separator.arguments.python
  - punctuation.separator.element.python
  - punctuation.separator.period.python
  - punctuation.section.class.begin.python
  - punctuation.section.function.begin.python

# ~~~ Math ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~ Bitwise ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- name: keyword.operator.bitwise.python
  <<: *operator_bitwise
  scope:
  - keyword.operator.bitwise.python

# Functions -----------------------------------------------------------------

- name: python/function/name
  <<: *name
  scope:
  - meta.function-call.generic.python

- name: return
  <<: *name
  scope:
  - meta.function-call.generic.python

# def add(a: int, b: int = 2) -> int:
#         ^       ^      ^
- name: meta.function.parameters.python
  <<: *params
  scope:
  - variable.parameter.function.language.python
  - meta.function.parameters.python keyword.operator.python

# def add(a: int, b: int) -> int:
#            ^^^     ^^^
- name: meta.function.parameters
  style: n@syntax.blue_lite
  scope: meta.function.parameters.python

# def add(a: int, b: int) -> int:
#                         ^^
- name: meta.function.parameters
  style: syntax.blue_lite
  scope:
  - punctuation.separator.annotation.result.python
  - punctuation.separator.annotation.python
  - punctuation.separator.parameters.python

# Argumens in the call.
#  self.update_state(state="PROGRESS", meta={"current": i + 1, "total": total})
#                    ^^^^^             ^^^^
- name: meta.function-call.arguments
  <<: *params
  settings:
    fontStyle: normal
  scope:
  - meta.function-call.arguments.python



# OOP & Data Oriented Programming  ------------------------------------------

- name: self
  <<: *this
  scope:
  - variable.parameter.function.language.special.self.python
  - variable.language.special.self

- name: variable.property.class.python
  # <<: *name
  style: u@red
  scope: variable.property.class.python


# # ~~~ Generics ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# # Imports, Packages & Modules --------------------------------------------------

- name: imported
  style: n@syntax.red/a60
  scope:
  - import.statement.python
  - import.statement.python punctuation.definition.begin.bracket.round.python

# from ..superhero import Superhero as sup
# ^^^^             ^^^^^^           ^^
- name: imported
  style: syntax.red_lite
  scope:
  - keyword.control.import.from.python
  - keyword.control.import.import.python
  - keyword.control.import.as.python

- name: imported
  style: syntax.white
  scope:
  - entity.name.import.python

# from ..superhero import Superhero
#      ^^
- name: local imports
  style: syntax.red/a60
  scope:
  - punctuation.definition.import.periods.python

