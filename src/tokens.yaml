# This document describes a grammar syntaxes for different languages.
# 1st) using simple rules of predefined grammar
# 2nd) using custom rules for specifics of grammars.

# colors https://colorswall.com/colors/xkcd

# In order to simplify merging `style` is corresponding to settings
#  Example 1:
#  style: 'uibn@color/alpha'
#    u - underline
#    b - bold
#    i - italic
#    n - normal
#
# Example 2:
# style: "#404020'

formats:
  comment: &comment                                                       # DONE
    style: i@syntax.white/a50

  keywords: &keywords                                                     # FIXME
    style: ibu@red

  keywords_control: &keywords_control                                     # DONE
    style: syntax.red_lite

  # ~~ Name ~~~~~~

  name: &name                                                             # DONE
    style: syntax.blue_lite

  # ~~ Functions ~~

  definition: &definition                                                 # DONE
    style: syntax.green
  builtin: &builtin                                                       # DONE
    style: u@syntax.blue_lite
  parameters: &parameters                                                 # DONE
    style: i@syntax.white

  property: &property                                                     # DONE
    style: syntax.green

  # ~~ Import ~~

  import: &import                                                         # DONE
    style: syntax.red_lite
  import_name: &import_name                                               # DONE
    style: syntax.white

  operator: &operators                                                    # DONE
    style: syntax.green_lite
  operator: &op_bitwise                                                   # DONE
    style: syntax.blue_lite
  operator: &op_special                                                   # DONE
    style: syntax.yellow_lite


  punctuation: &punctuation                                               # DONE
    style: syntax.white

  constant: &constant                                                     # FIXME
    style: ibu@red
  constant_language: &constant_language                                   # DONE
    style: b@syntax.blue

  constant_other: &constant_other                                         # DONE
    style: u@syntax.yellow


  constant_number: &constant_number                                       # DONE
    style: syntax.blue
  constant_int: &constant_int                                             # DONE
    style: syntax.blue
  constant_float: &constant_float                                         # DONE
    style: syntax.blue

  # ~~~ Objects ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  class: &class                                                           # DONE
    style: syntax.green
  class_name: &class_name                                                 # DONE
    style: syntax.blue_lite
  class_name_inherited: &class_name_inherited                             # DONE
    style: syntax.blue_lite
  class_this: &class_this                                                 # DONE
    style: syntax.yellow
  class_access_modifier: &class_access_modifier                           # DONE
    style: ui@syntax.green/a80
  variable: &variable                                                     # DONE
    style: syntax.blue

  # ~~~ Type System ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  type: &type                                                             # DONE
    style: syntax.yellow_lite/a80
  variable_name: &variable_name                                           # DONE
    style: syntax.blue_lite
  var_type_nil: &var_type_nil                                             # DONE
    style: syntax.blue_lite
  var_type_bool: &var_type_bool                                           # DONE
    style: syntax.blue_lite

  var_type_int: &var_type_int                                             # DONE
    style: syntax.blue
  var_type_float: &var_type_float                                         # DONE
    style: syntax.blue
  var_type_number: &var_type_number                                       # DONE
    style: syntax.blue

  # ~~ Strings ~~

  string: &string                                                         # DONE
    style: syntax.yellow_lite
  string_quotes: &string_quotes                                           # DONE
    style: syntax.yellow/a70
  string_placeholder: &string_placeholder                                 # DONE
    style: syntax.white
  constant_escape: &constant_escape                                       # DONE
    style: syntax.white

  # ~~ Misc ~~

  illegal: &illegal                                                       # DONE
    style: bu@red

grammars:

- name: # GRAMMAR ~~~ Common  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:

  - name: "comment"
    <<: *comment
    scope:
    - comment

  - name: "illegal"
    <<: *illegal
    scope:
    - invalid.illegal

  - name: var/type/number
    <<: *var_type_number
    scope: constant.numeric

  - name: var/type/float
    <<: *var_type_float
    scope: constant.numeric.float

  - name: var/type/int
    <<: *var_type_number
    scope: constant.numeric.integer

  - name: var/type/bool
    <<: *var_type_bool
    scope: constant.language.boolean

  - name: var/type/nil
    <<: *var_type_nil
    scope: constant.language.null

  # ~~~ Operators ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: operator/math
    <<: *operators
    scope:
    - keyword.operator.address
    - keyword.operator.arithmetic
    - keyword.operator.increment
    - keyword.operator.decrement
    - keyword.operator.comparison
    - keyword.operator.assignment

  - name: operator/math
    <<: *op_bitwise
    scope:
    - keyword.operator.arithmetic.bitwise
    - keyword.operator.bitwise

  # ~~~ Constants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: control/flow
    <<: *keywords_control
    scope:
    - keyword.control


  # ~~~ Constants ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: constant/language
    <<: *constant_language
    scope: constant.language

  # ~~~ Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: string
    <<: *string
    scope:
    - string.unquoted
    - string.quoted
    - string.template

  - name: string/quotes
    <<: *string_quotes
    scope:
    - punctuation.definition.string.begin
    - punctuation.definition.string.end

  - name: string/placeholder
    <<: *string_placeholder
    scope:
    - constant.character.format.placeholder

  # ~~~ Imports, Keywords and Flow ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: import
    <<: *import
    scope:
    - keyword.control.import

  - name: constant/escape
    <<: *constant_escape
    scope: constant.character.escape

  # ~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: function/definition
    <<: *definition
    scope: storage.type.function

  - name: function/name
    <<: *name
    scope: entity.name.function

  - name: function/builtin
    <<: *builtin
    scope: support.function.builtin

  - name: function/parameters
    <<: *parameters
    scope:
    - meta.function.parameters

  # ~~~ Objects ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: class
    <<: *class
    scope: storage.type.class

  - name: class/name
    <<: *class_name
    scope: entity.name.type.class

  - name: class/name/inherited
    <<: *class_name_inherited
    scope: entity.other.inherited-class

  - name: "class/this"
    <<: *class_this
    scope:
    - variable.parameter.function.language.special.self
    - variable.language.special.self

  - name: class/access/modifier
    <<: *class_access_modifier
    scope:
    - storage.modifier

  # ~~~ Punctuation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: punctuation.definition.parameters
    <<: *punctuation
    settings:
      fontStyle: normal
    scope:
    - punctuation.definition.parameters.begin
    - punctuation.definition.parameters.end

  - name: keyword.operator.logical
    <<: *keywords_control
    scope:
    - keyword.operator.logical

- name: # GRAMMAR ~~~ Starlark ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:

  - name: "*"
    <<: *punctuation
    scope: source.starlark

  - name: starlark/docstring
    <<: *comment
    scope:
    - comment.block.documentation.starlark punctuation.definition.string.begin.starlark
    - comment.block.documentation.starlark punctuation.definition.string.end.starlark

  - name: starlark/functions
    <<: *name
    scope:
    - support.function.starlark

- name: # GRAMMAR ~~~ Documentation Strings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:

  - name: doc/type
    settings:
      foreground: syntax.yellow_lite
    scope:
    - keyword.other.type.php
    - comment.block.documentation.phpdoc.php support.class.php

    # TODO REVIEW EXAMPLES
    - constant.language.access-type.jsdoc
    - constant.language.symbol-type.jsdoc
    - constant.other.description.jsdoc
    - constant.other.email.link.underline.jsdoc
    - entity.name.tag.inline.jsdoc
    - keyword.operator.assignment.jsdoc
    - keyword.operator.control.jsdoc
    - meta.example.jsdoc
    - entity.name.type.instance.jsdoc

  - name: doc/at
    settings:
      foreground: syntax.blue_lite
    scope:
    - storage.type.class.jsdoc
    - keyword.other.phpdoc.php

  - name: doc/type/var
    settings:
      foreground: syntax.green
    scope:
    - variable.other.jsdoc

- name: # GRAMMAR ~~~ Python ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:

  - name: "*"
    <<: *punctuation
    scope: source.python

  - name: "python/function/lambda"
    <<: *definition
    scope:
    - storage.type.function.lambda.python

  - name: "python/function/dunders"
    <<: *name
    settings:
      fontStyle: italic
    scope:
    - support.function.magic
    - support.variable.magic.python

  - name: python/function/name
    <<: *name
    scope:
    - meta.function-call.generic.python

  - name: punctuation.definition.parameters
    <<: *punctuation
    settings:
      fontStyle: italic
    scope:
    - variable.parameter.function.language.python

  - name: python/type
    <<: *type
    scope:
    - meta.function.parameters.python support.type.python
    - meta.function.python support.type.python

  - name: class/this
    <<: *class_this
    scope:
    - variable.parameter.function.language.special.self.python
    - variable.language.special.self

  - name: python/class/inheritance/punctuation
    <<: *class_name_inherited
    scope:
    - support.type.python

  - name: python/decorator
    style: iu@syntax.blue_lite
    scope:
    - punctuation.definition.decorator.python
    - entity.name.function.decorator.python

  - name: python/type/call/normalization
    settings:
      foreground: syntax.blue
      fontStyle: normal
    scope:
    - meta.function-call.python support.type.python

  - name: docstring
    <<: *comment
    scope: 	string.quoted.docstring.multi.python


- name: # GRAMMAR ~~~ Go ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:
  - name: "*"
    <<: *punctuation
    scope: source.go

  - name: go/package
    settings:
      foreground: syntax.blue_lite
      fontStyle: underline
    scope: entity.name.package.go


  - name: go/import
    <<: *import
    scope: keyword.import.go

  - name: go/import/name
    style: syntax.white
    scope: entity.name.import.go

  - name: go/import/name/alias
    style: b@syntax.white/a50
    scope: variable.other.import.go

  - name: go/definitions
    <<: *definition
    scope:
    - keyword.function.go
    - keyword.var.go
    - keyword.const.go
    - keyword.map.go
    - keyword.type.go

  - name: go/definitions
    <<: *definition
    scope:
    - keyword.struct.go
    - keyword.interface.go

  - name: "go/type"
    <<: *type
    scope:
    - entity.name.type.go
    - storage.type.string.go
    - storage.type.boolean.go
    - storage.type.byte.go
    - storage.type.error.go
    - storage.type.numeric.go
    - storage.type.rune.go
    - storage.type.uintptr.go
    - entity.name.type.any.go

  - name: go/function
    <<: *name
    scope:
    - support.function.go

  - name: go/operator/other
    <<: *op_special
    scope:
    - keyword.operator.ellipsis.go
    - keyword.operator.address.go

  - name: "go/async"
    settings:
      foreground: syntax.blue_lite
    scope:
    - keyword.operator.channel.go
    - keyword.channel.go

  - name: go/placeholder
    <<: *string_placeholder
    scope:
    - constant.other.placeholder.go

- name: # GRAMMAR ~~~ Go Template ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:
  - name: go/placeholder
    <<: *string_placeholder
    scope:
    - constant.other.placeholder.gotemplate

  - name: go/temlates/var
    <<: *variable
    scope:
    - variable.other.gotemplate

  - name: go/keywords
    settings:
      foreground: syntax.green
    scope:
    - punctuation.section.embedded.begin.gotemplate
    - punctuation.section.embedded.end.gotemplate
    - keyword.operator.pipe.gotemplate

- name: # GRAMMAR ~~~ Shell ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:
  - name: "*"
    <<: *punctuation
    scope: source.shell

  - name: shell/var/type/number
    <<: *var_type_number
    scope:
    - constant.numeric.hex.shell
    - constant.numeric.integer.shell
    - constant.numeric.octal.shell

  - name: shell/modifer
    <<: *definition
    settings:
      fontStyle: normal
    scope:
    - storage.modifier.shell

  - name: shell/keywords
    style: n@syntax.green
    scope:
    - keyword.operator.redirect.shell
    - keyword.operator.pipe.shell

  - name: shell/keywords
    settings:
      foreground: syntax.yellow
    scope:
    - punctuation.section.array.shell
    - variable.other.bracket.shell

- name: # GRAMMAR ~~~ PHP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:

  - name: "*"
    <<: *punctuation
    scope: source.php

  - name: php/include/reset
    <<: *punctuation
    scope:
    - meta.include.php string.quoted.double.php
    - meta.include.php string.quoted.single.php

  - name: php/names
    <<: *name
    scope:
    - entity.name.type.interface.php
    - entity.name.type.trait.php

  - name: php/entities
    <<: *definition
    scope:
    - storage.type.interface.php
    - storage.type.trait.php
    - support.class.exception.php

  - name: php/types
    <<: *type
    scope:
    - storage.type.php

  - name: php/var/$
    <<: *op_special
    settings:
      fontStyle: normal
    scope:
    - storage.modifier.reference.php
    - punctuation.definition.variable.php
    - punctuation.definition.arrow.php
    - keyword.operator.key.php

  - name: php/var/param/$
    <<: *op_special
    settings:
      fontStyle: italic
    scope:
    - meta.function.parameter.no-default.php storage.modifier.reference.php
    - meta.function.parameter.no-default.php punctuation.definition.variable.php
    - meta.function.parameter.no-default.php punctuation.definition.arrow.php
    - meta.function.parameter.no-default.php keyword.operator.key.php

  - name: php/this/new
    <<: *class_this
    settings:
      fontStyle: bold
    scope:
    - variable.language.this.php
    - keyword.other.new.php

  - name: php/types/nullable
    <<: *type
    scope:
    - keyword.operator.nullable-type.php

  - name: php/control/keywords
    <<: *keywords_control
    scope:
    - keyword.other.use.php

  - name: php/function
    <<: *name
    scope:
    - meta.use.php support.class.php
    - meta.function-call.php entity.name.function.php
    - meta.function-call.php support.function

  - name: php/builtin
    <<: *builtin
    scope:
    - support.function.construct.output.php
    - support.function.basic_functions.php
    - meta.array.php support.function.construct.php
    - support.class.builtin.php

- name: # GRAMMAR ~~~ HCL ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:
  - name: hcl/name
    desc: "Block Names"
    <<: *name
    scope:
    - storage.type.terraform
    - entity.name.label.terraform

  - name: hcl/variable
    desc: "Variables defined in blocks"
    settings:
      foreground: syntax.green
    scope:
    - variable.declaration.terraform

  - name: hcl/variable
    desc: "Interpolated Variables"
    settings:
      fontStyle: underline
    scope:
    - string.quoted variable.other.member.terraform
    - string.quoted variable.other.readwrite.terraform

  - name: hcl/variable
    desc: "Constant in Interpolated Variables"
    settings:
      foreground: syntax.blue
      fontStyle: underline
    scope:
    - string.quoted support.constant.terraform

- name:  # GRAMMAR ~~~ Docker ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:

  - name: "docker/keywords"
    settings:
      foreground: syntax.yellow
    scope:
    - keyword.operator.dockerfile
    - keyword.other.special-method.dockerfile

- name: # GRAMMAR ~~~ HTML ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar: # GRAMMAR ~~~ HTML ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


  - name: "*"
    <<: *punctuation
    scope:
    - text.html

  - name: "*"
    settings:
      foreground: syntax.blue_lite
    scope:
    - entity.name.tag.html
    - punctuation.definition.tag.begin.html
    - punctuation.definition.tag.end.html


- name : # GRAMMAR ~~~ TypeScript / JavaScript ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:
  - name: "*"
    <<: *punctuation
    scope:
    - source.ts
    - source.js

  - name: ts/import
    <<: *import
    scope:
    - keyword.control.from.ts
    - keyword.control.require.ts

  - name: ts/import/all
    <<: *import
    style: bu@syntax.red_lite
    scope:
    - constant.language.import-export-all.ts

  - name: ts/operators
    <<: *operators
    scope:
    - keyword.operator.ternary.ts
    - keyword.operator.ternary.js
    - keyword.operator.spread.ts
    - keyword.operator.expression.of.ts
    - keyword.operator.type.ts
    - keyword.operator.expression.typeof.ts
    - keyword.operator.expression.typeof.js
    - keyword.operator.optional.ts
    - keyword.operator.relational.ts
    - keyword.operator.relational.js

  - name: ts/type
    <<: *type
    scope:
    - entity.name.type.ts
    - entity.name.type.js
    - support.type.primitive.ts
    - entity.name.type.alias.ts
    - entity.name.type.enum.ts
    - entity.name.type.interface.ts

  - name: ts/type/generics/braces
    style: b@syntax.blue
    scope:
    - punctuation.definition.typeparameters.begin.ts
    - punctuation.definition.typeparameters.end.ts
    - meta.brace.angle.ts


  - name: ts/objects/this
    <<: *class_this
    scope:
    - keyword.operator.new.ts
    - keyword.operator.new.js
    - variable.language.this.ts
    - variable.language.this.js

  - name: ts/module
    settings:
      foreground: syntax.yellow
    scope:
    - entity.name.type.module.ts
    - entity.name.type.module.js
    - variable.other.object.ts
    - variable.other.object.js

  - name: ts/functions/name
    <<: *name
    scope:
    - support.function.json.ts
    - support.function.js

  - name: ts/functions/parameters
    <<: *punctuation
    settings:
      fontStyle: italic
    scope:
    - variable.parameter.ts
    - variable.parameter.js

  - name: ts/definitions
    <<: *definition
    scope:
    - storage.type.type.ts
    - meta.var.expr.ts storage.type.ts
    - meta.var.expr.js storage.type.js
    - storage.type.enum.ts
    - storage.type.interface.ts
    - storage.modifier.js

  - name: ts/builtin
    <<: *builtin
    scope:
    - support.class.builtin.ts
    - support.class.console.ts
    - support.class.error.ts
    - support.class.promise.ts
    - support.type.builtin.ts
    - support.constant.json.ts


  - name: js/key
    <<: *variable_name
    scope:
    - meta.object-literal.key.js


- name: # GRAMMAR ~~~ Protobuf ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar: # GRAMMAR ~~~ Protobuf ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: "*"
    <<: *punctuation
    scope:
    - source.proto

  - name: proto/definitions
    <<: *definition
    scope:
    - keyword.other.proto
    - keyword.other.proto

  - name: proto/class/name
    <<: *class_name
    scope:
    - entity.name.class.message.proto

  - name: proto/class/name
    <<: *parameters
    scope:
    - entity.name.class.proto

  - name: proto/type
    <<: *type
    scope:
    - storage.type.proto

  - name: proto/constant
    <<: *constant_other
    scope:
    - constant.other.proto

- name:  # GRAMMAR ~~~ CSS/LESS/SCSS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:  # GRAMMAR ~~~ CSS/LESS/SCSS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: "*"
    <<: *punctuation
    scope:
    - source.css

  - name: style/mixins_or_functions
    <<: *name
    scope:
    - entity.other.attribute-name.class.mixin.css
    - support.function.misc.css
    - support.function.type-checking.less
    - support.function.any-method.builtin.less
    - support.function.url.css
    - support.function.misc.scss


  - name: style/keywords
    <<: *keywords
    scope:
    - keyword.other.default.scss
    - keyword.other.important.css

  - name: style/string
    <<: *string
    scope:
    - support.constant.font-name.css
    - variable.parameter.url.scss

  - name: style/variable/init
    descr: "Declaration of variable and its property"
    settings:
      foreground: syntax.yellow_lite
    scope:
    - meta.property-list.css variable.css
    - meta.definition.variable.scss variable.scss
    - variable.other.less

  - name: style/property/name
    settings:
      foreground: syntax.green_lite
    scope:
    - support.type.property-name.css
    - support.type.vendored.property-name.css
    - meta.property-list.scss entity.name.tag.css
    - meta.property-list.css entity.name.tag.css

  - name: style/property/value
    <<: *property
    scope:
    - meta.property-value.css
    - support.constant.property-value.css
    - support.constant.color.w3c-standard-color-name.css
    - variable.parameter.keyframe-list.css

  - name: style/property/value+variable
    settings:
      foreground: "#a9ba21"
      fontStyle: normal
    scope:
    - meta.property-value.scss variable.scss
    - meta.property-value.css variable.other.less
    - meta.function.variable.css variable.argument.css

  - name: style/parameters
    <<: *parameters
    descr: "italic in mixin parameters in scss, less isn't working"
    scope:
    - meta.at-rule.mixin.scss variable.scss
    - meta.at-rule.supports.header.css meta.property-name.css
    - variable.other.less

  - name: style/other
    <<: *keywords_control
    scope:
    - entity.other.keyframe-offset.css

- name: # GRAMMAR ~~~ MARKDOWN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:  # GRAMMAR ~~~ MARKDOWN ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: &highlight
      foreground: highBg

  - name: md/reset
    settings:
      foreground: syntax.white
    scope:
    - text.html.markdown
    - punctuation.definition.string.begin.markdown
    - punctuation.definition.string.end.markdown

  - name: md/bold
    settings:
      <<: *highlight
      fontStyle: bold
    scope: markup.bold.markdown

  - name: md/italic
    settings:
      <<: *highlight
      fontStyle: italic
    scope: markup.italic.markdown

  - name: md/quote/quote
    settings:
      fontStyle: italic
    scope: markup.quote.markdown

  - name: md/quote/quote
    settings:
      foreground: syntax.white/a50
    scope: markup.raw.block.markdown

  - name: md/image
    settings:
      <<: *highlight
      fontStyle: bold
    scope:
    - meta.image.inline.markdown

  - name: md/highlight
    settings:
      <<: *highlight
    scope:
    # links
    - string.other.link.title.markdown
    - markup.underline.link.markdown
    # headers
    - punctuation.definition.heading.markdown
    # list
    - punctuation.definition.list.begin.markdown
    # inline code
    - markup.inline.raw.string.markdown
    # code blocks
    - markup.fenced_code.block.markdown punctuation.definition.markdown
    # quote begins
    - punctuation.definition.quote.begin.markdown


- name:  # GRAMMAR ~~~ JSON ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:  # GRAMMAR ~~~ JSON ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: json/name
    <<: *variable_name
    scope:
    - string.json support.type.property-name.json

  - name: "json/constant"
    scope:
    - constant.language.json


- name:  # GRAMMAR ~~~ YAML ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  grammar:
  - name: yaml/document
    settings:
      foreground: syntax.blue
    scope:
    - entity.other.document.begin.yaml
    - entity.other.document.end.yaml

  - name: yaml/name
    <<: *variable_name
    scope: entity.name.tag.yaml

  - name: yaml/vat/type/date
    <<: *variable_name
    settings:
      fontStyle: underline
    scope: constant.other.timestamp.yaml

  - name: yaml/operator
    <<: *operators
    scope:
    - punctuation.definition.anchor.yaml
    - punctuation.definition.alias.yaml
    - keyword.control.flow.block-scalar.folded.yaml
    - keyword.control.flow.block-scalar.literal.yaml
    - storage.modifier.chomping-indicator.yaml
    - constant.language.merge.yaml

  - name: yaml/operator
    settings:
      foreground: syntax.white
      fontStyle: italic
    scope:
    - entity.name.type.anchor.yaml
    - variable.other.alias.yaml

  - name:  yaml/tags
    settings:
      foreground: syntax.yellow
      fontStyle: italic
    scope: storage.type.tag-handle.yaml

- grammar: # GRAMMAR ~~~ Rust ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  - name: "*"
    style: white/a50
    scope: source.rust

  - name: rust/control flow
    style: n@syntax.red_lite
    scope:
    - keyword.control.rust

  - name: import
    <<: *import
    scope:
    - meta.use.rust

  - name: rust/definitions
    <<: *definition
    scope:
    - meta.function.definition.rust
    - keyword.declaration.struct.rust
    - storage.type.rust

  - name: mut
    style: ubi@syntax.green
    scope:
    - source.rust storage.modifier.mut.rust
    - source.rust storage.modifier

  - name: types
    <<: *type
    scope:
    - entity.name.type.rust
    - source.rust entity.name.type

  - name: doc punctuation
    style: i@syntax.white/a80
    scope: comment.line.documentation.rust

  - name: doc punctuation + doc
    <<: *comment
    scope: punctuation.definition.comment.rust

  - name: functions + punctuation
    <<: *punctuation
    scope:
    - punctuation.brackets.angle.rust
    - punctuation.brackets.round.rust
    - punctuation.brackets.curly.rust
    - keyword.operator.key-value.rust
    - meta.function.definition.rust punctuation.brackets.round.rust
    - meta.function.definition.rust keyword.operator.arrow.skinny.rust

  - name: attributes
    style: i@syntax.violet/a80
    scope:
    - punctuation.definition.attribute.rust
    - punctuation.definition.attribute.rust
    - meta.attribute.rust keyword.operator.assignment.equal.rust
    - meta.attribute.rust punctuation.brackets.round.rust
    - meta.attribute.rust

  - name: attributes (string)
    style: i@syntax.violet/a50
    scope:
    - meta.attribute.rust string.quoted.double.rust

  - name: rust/variables
    style: syntax.white
    scope:
    - variable.other.rust
    - constant.other.caps.rust

  - name: rust/variables/self
    style: i@syntax.yellow
    scope:
    - variable.language.self.rust

  - name: macros$
    style: b@syntax.white
    scope: keyword.operator.macro.dollar

  - name: macros
    style: syntax.white
    scope: meta.macro.metavariable.rust

  - name: arrow
    style: syntax.white
    scope: keyword.operator.arrow.fat.rust

  - name: namespace (puctuation)
    style: syntax.white/a50
    scope: keyword.operator.namespace.rust

  - name: namespace (name)
    style: syntax.blue_lite
    scope:
    - source.rust constant.numeric

  - name: namespace (name)
    style: ib@syntax.blue_lite
    scope:
    - source.rust constant.numeric entity.name.type.numeric.rust

  - name: namespace (name)
    style: syntax.white
    scope:
    - entity.name.namespace.rust
    - meta.use.rust keyword.operator.math.rust

  - name: ending semi
    style: syntax.white/a60
    scope: punctuation.semi.rust

  - name: borrowing
    style: i@syntax.yellow_lite/a80
    scope:
    - keyword.operator.borrow.and.rust
    - punctuation.definition.lifetime.rust

  - name: borrowing (argument)
    style: i@syntax.white/a80
    scope:
    -  meta.function.call.rust keyword.operator.borrow.and.rust

  - name: deref
    style: i@syntax.white/a80
    scope:
    -  keyword.operator.dereference.rust

