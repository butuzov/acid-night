#!/usr/bin/env python3
"""
    This script watches for sources and rebuild theme.json

        ./scripts/compiler
"""

import json, yaml
from time import sleep
from random import choice, choices

import hashlib

from datetime import datetime
from os.path import splitext
from os import O_WRONLY
import sys


class Theme:

    short = {
        'i': 'italic',
        'u': 'underline',
        'b': 'bold',
        'n': 'normal',
    }

    def __init__(self, theme_name: str, theme_type: str):
        self._name = theme_name
        self._type = theme_type

        # colors
        self._file_palette = "src/palette.yaml"
        self._file_theme = "src/theme.yaml"
        self._file_tokens = "src/tokens.yaml"
        self._monitor = {}

        # destination
        self.dest = "acid.json"

    def is_changed(self, out=True) -> bool:

        theme = self._is_changed(self._file_theme)
        tokens = self._is_changed(self._file_tokens)
        palette = self._is_changed(self._file_palette)

        dest = sys.stdout
        if not out:
            dest = os.open('/dev/null', O_WRONLY)

        if palette:
            self._palette = Theme.read(self._file_palette)
            print("Palette changed       : {0}".format(datetime.now().time()),
                  file=dest)

        if tokens:
            self._tokens = Theme.read(self._file_tokens)
            print("Tokens changed        : {0}".format(datetime.now().time()),
                  file=dest)

        if theme:
            self._theme = Theme.read(self._file_theme)
            print("Theme changed         : {0}".format(datetime.now().time()),
                  file=dest)

        return palette or theme or tokens

    def dpath(self, color_map, path):
        tmp = dict(color_map)

        for i in path.split("."):
            tmp = tmp.get(i, f"{path}")
            if isinstance(tmp, str):
                return tmp

        return tmp

    def pick(self, path):

        if path == '_':
            value = Theme.random_color()
        elif "/" in path:
            rgb, a = path.split("/")
            value = self.dpath(self._palette, rgb) + self.dpath(
                self._palette, a)
        elif "." in path:
            value = self.dpath(self._palette, path)
        elif path[0] == "#":
            value = path
        else:
            value = self.dpath(self._palette, path)

        # is this a fontStyle value?
        if all([True if i in 'ibun' else False for i in value]):
            value = " ".join([self.short.get(i) for i in value])

        if value in ("italic", "bold", "underline", "normal"):
            return value

        if path == value and value[0] != "#":
            print(f"Not found {value}")

        return value

    def _is_changed(self, file) -> bool:
        hasher = hashlib.md5()
        with open(file, "r") as f:
            buf = f.read()
            hasher.update(buf.encode())

        if self._monitor.get(file, None) == hasher.hexdigest():
            return False

        self._monitor[file] = hasher.hexdigest()
        return True

    def generate(self, shuffle=False):
        t = Theme.read(self.dest)
        if not len(t):
            t['name'] = self._name
            t['type'] = self._type

        # Saving VSC Theme
        t['colors'] = {}
        settingsColors = {} if self._theme is None else self._theme

        for section, values in settingsColors.items():

            if isinstance(values, str):
                t['colors'][f"{section}"] = self.pick(values)
                continue

            if isinstance(values, dict):
                for param, value in values.items():
                    t['colors'][f"{section}.{param}"] = self.pick(value)

        # Generating Syntax Themes
        t['tokenColors'] = []
        settingsTokens = {} if self._tokens is None else self._tokens

        for items in settingsTokens.get('grammars', []):

            # this is purly cosmetical.
            data = items.get('grammar', [])
            if not isinstance(data, list):
                continue

            for item in data:

                settings = self.unpack(
                    item.get('style', ""),
                    item.get('settings', {}),
                )

                if 'style' in item: del item['style']
                if 'settings' in item: del item['settings']

                item['settings'] = settings

                # no scope - pass
                if 'scope' not in item:
                    continue

                # scope move
                scope = item['scope']
                del item['scope']
                if len(scope) == 1:
                    item['scope'] = scope[0]
                else:
                    item['scope'] = scope

                t['tokenColors'].append(item)

        self.save_theme(self.dest, t)

    def save_theme(self, name, theme):
        """ dump settings to the file """

        with open(name, "w") as f:
            print("{0:<21} : {1}".format(name, datetime.now().time()))
            json.dump(theme, fp=f, indent=4)

    def unpack(self, value: str, redefined: dict) -> dict:
        """ unpack short value e.g. `bui@black` to style and foreground """

        if '@' in value:
            fontStyle, foreground = value.split("@")
            redefined['foreground'] = self.pick(foreground)
            redefined['fontStyle'] = self.pick(fontStyle)
        elif value:
            is_style = all([True if i in 'ibun' else False for i in value])
            name = ('foreground', 'fontStyle')[int(is_style)]
            redefined[name] = self.pick(value)
        else:
            for name, value in redefined.items():
                redefined[name] = self.pick(value)

        return redefined

    @staticmethod
    def random_color() -> str:
        """ generates random color (substitute for `_` )"""
        return "#" + ''.join([choice('0123456789ABCDEF') for j in range(6)])

    @staticmethod
    def read(file):
        """ file reader/unserializer utility """

        _, ext = splitext(file)

        executors = {
            '.yaml': lambda file: yaml.load(file, Loader=yaml.CLoader),
            '.yml': lambda file: yaml.load(file, Loader=yaml.CLoader),
            '.json': lambda file: json.load(file),
        }
        try:
            with open(file, "r") as f:
                return executors.get(ext)(f)
        except BaseException as e:
            print(f"Error reading {file} with {e}")

        return {}


def main(settings: dict):
    theme = Theme("Acid", "dark")
    while True:
        if theme.is_changed(settings["quick"] != "--quick"):
            theme.generate(settings['shuffle_tokens'])

        if settings['quick']:
            theme.generate(settings['shuffle_tokens'])
            return

        sleep(1)


if __name__ == "__main__":
    import sys

    settings = {
        "quick": "--quick" in sys.argv,
        "shuffle_tokens": "--tokens" in sys.argv,
    }

    main(settings)
