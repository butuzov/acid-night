#!/usr/bin/env python3
"""
This script watches for sources and rebuild theme.json

    ./scripts/compiler
"""

import json
import sys
from datetime import datetime
from os import O_WRONLY
from os.path import basename, join, split, splitext
from random import choice, choices

from ruamel import yaml


def my_compose_document(self):
    self.get_event()
    node = self.compose_node(None, None)
    self.get_event()
    # self.anchors = {}    # <<<< commented out
    return node


yaml.SafeLoader.compose_document = my_compose_document


def yaml_include(loader, node):
    with open(node.value) as inputfile:
        data = my_safe_load(inputfile, master=loader)

        file = basename(inputfile.name).split(".")[0]

        def wrap_with_name(item):
            if val := item.get("name"):
                item["name"] = f"{file} / {val}"
            return item

        if isinstance(data, list):
            return list(map(wrap_with_name, data))

        return list(data.values())[0]


#              leave out the [0] if your include file drops the key ^^^

yaml.add_constructor("!include", yaml_include, Loader=yaml.SafeLoader)


def my_safe_load(stream, Loader=yaml.SafeLoader, master=None):
    loader = Loader(stream)
    if master is not None:
        loader.anchors = master.anchors
        # print(loader.anchors)
    try:
        return loader.get_single_data()
    finally:
        loader.dispose()


class Theme:
    short = {
        "i": "italic",
        "u": "underline",
        "b": "bold",
        "n": "normal",
    }

    def __init__(self, theme_name: str, theme_type: str):
        self._name = theme_name
        self._type = theme_type

        # Colors.
        self._colors = Theme.read("src/colors.yaml")
        # Theme Customization
        self._themes = Theme.read("src/theme.yaml")
        # Highlight Colors.
        self._languages = Theme.read("src/languages.yaml")

        # destination
        self.dest = "acid.json"

    def dpath(self, color_map, path):
        tmp = dict(color_map)

        for i in path.split("."):
            tmp = tmp.get(i, f"{path}")
            if isinstance(tmp, str):
                return tmp

        return tmp

    def pick(self, path):
        if path == "_":
            value = Theme.random_color()
        elif "/" in path:
            rgb, a = path.split("/")
            value = self.dpath(self._colors, rgb) + self.dpath(self._colors, a)
        elif "." in path:
            value = self.dpath(self._colors, path)
        elif path[0] == "#":
            value = path
        else:
            value = self.dpath(self._colors, path)

        # is this a fontStyle value?
        if all([True if i in "ibun" else False for i in value]):
            value = " ".join([self.short.get(i) for i in value])

        if value in ("italic", "bold", "underline", "normal"):
            return value

        if path == value and value[0] != "#":
            print(f"Not found {value}")

        return value

    def generate(self, shuffle=False):
        # note: Loading Previous Result (acid.json) and it
        #       will work as placeholder...
        t = Theme.read(self.dest)
        if not len(t):
            t["name"] = self._name
            t["type"] = self._type

        # Saving VSC Theme
        t["colors"] = {}
        for section, values in self._themes.items():
            # TOP LEVEL SETTINGS...
            if isinstance(values, str):
                t["colors"][f"{section}"] = self.pick(values)
                continue

            if isinstance(values, dict):
                for param, value in values.items():
                    t["colors"][f"{section}.{param}"] = self.pick(value)

        # Syntax Highlight...
        t["tokenColors"] = []

        for language in self._languages["includes"]:
            if not language:
                continue

            for item in language:
                if "scope" not in item:
                    continue

                t["tokenColors"].append(
                    {
                        "name": item["name"],
                        "settings": self.unpack(
                            item.get("style", ""),
                            item.get("settings", {}),
                        ),
                        "scope": item["scope"],
                    }
                )

        self.save_theme(self.dest, t)

    def save_theme(self, name, theme):
        """dump settings to the file"""
        with open(name, "w") as f:
            print("{0:<21} : {1}".format(name, datetime.now().time()))
            json.dump(theme, fp=f, indent=4)

    def unpack(self, value: str, redefined: dict) -> dict:
        """unpack short value e.g. `bui@black` to style and foreground"""
        if "@" in value:
            fontStyle, foreground = value.split("@")
            redefined["foreground"] = self.pick(foreground)
            redefined["fontStyle"] = self.pick(fontStyle)
        elif value:
            is_style = all([True if i in "ibun" else False for i in value])
            name = ("foreground", "fontStyle")[int(is_style)]
            redefined[name] = self.pick(value)
        else:
            for name, value in redefined.items():
                redefined[name] = self.pick(value)

        return redefined

    @staticmethod
    def random_color() -> str:
        """generates random color (substitute for `_` )"""
        return "#" + "".join([choice("0123456789ABCDEF") for j in range(6)])

    @staticmethod
    def read(file):
        """file reader/deserializer utility"""

        _, ext = splitext(file)

        executors = {
            ".yaml": lambda file: my_safe_load(file),
            ".yml": lambda file: my_safe_load(file),
            ".json": lambda file: json.load(file),
        }
        try:
            with open(file, "r") as f:
                return executors.get(ext)(f)
        except BaseException as e:
            print(f"Error reading {file} with {e}")

        return {}


def main(settings: dict):
    theme = Theme("Acid", "dark")
    theme.generate(settings["shuffle_tokens"])


if __name__ == "__main__":
    import sys

    """
    --quick will
    """
    settings = {
        "quick": "--quick" in sys.argv,
        "shuffle_tokens": "--tokens" in sys.argv,
    }

    main(settings)
